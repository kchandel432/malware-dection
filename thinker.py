import os
import re
import tkinter as tk
from tkinter import filedialog, messagebox

import joblib
import pandas as pd
import pefile
import pyfiglet
import requests
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Load pre-trained machine learning models
try:
    pe_model = joblib.load("pe_model.pkl")
    url_model = joblib.load("url_model.pkl")
except FileNotFoundError:
    print(
        "Model files not found. Ensure 'pe_model.pkl' and 'url_model.pkl' exist in the same directory."
    )
    exit()


# Placeholder: Train a PE file model
def train_pe_model():
    # Load your PE file dataset
    # data = pd.read_csv('pe_files.csv')
    # features = data.drop('label', axis=1)
    # labels = data['label']
    features = pd.DataFrame([[0] * 20] * 100)  # Dummy data
    labels = [0, 1] * 50  # Dummy labels

    # Train a RandomForest model (example)
    model = RandomForestClassifier()
    model.fit(features, labels)

    # Save the model
    joblib.dump(model, "pe_model.pkl")


# Placeholder: Train a URL model
def train_url_model():
    # Load your URL dataset
    # data = pd.read_csv('urls.csv')
    # features = data['url']
    # labels = data['label']
    features = ["http://example.com"] * 100  # Dummy data
    labels = [0, 1] * 50  # Dummy labels

    # Feature extraction using TfidfVectorizer
    vectorizer = TfidfVectorizer()
    features_vectorized = vectorizer.fit_transform(features)

    # Train a RandomForest model (example)
    model = RandomForestClassifier()
    model.fit(features_vectorized, labels)

    # Save the model and vectorizer
    joblib.dump(model, "url_model.pkl")
    joblib.dump(vectorizer, "vectorizer.pkl")


# Feature extraction for PE files
def extract_pe_features(file_path):
    pe = pefile.PE(file_path)
    features = []

    # Example features (customize as needed)
    features.append(pe.FILE_HEADER.Machine)
    features.append(pe.FILE_HEADER.SizeOfOptionalHeader)
    features.append(pe.FILE_HEADER.Characteristics)
    # Add more features from the PE file

    # Placeholder for feature extraction logic
    return features


# Feature extraction for URLs
def extract_url_features(url):
    # Placeholder: Basic features, expand with your logic
    features = [
        len(url),
        len(re.findall(r"\d", url)),
        len(re.findall(r"[A-Za-z]", url)),
    ]
    return features


# Function to run PE scanner
def run_PE():
    file_path = filedialog.askopenfilename(
        title="Select the PE file", filetypes=[("PE Files", "*.exe")]
    )
    if file_path:
        features = extract_pe_features(file_path)
        prediction = pe_model.predict([features])
        if prediction == 1:
            messagebox.showinfo("Result", "The file is malicious.")
        else:
            messagebox.showinfo("Result", "The file is clean.")


# Function to run URL scanner
def run_URL():
    url = url_entry.get()
    if url:
        vectorizer = joblib.load("vectorizer.pkl")
        features = vectorizer.transform([url])
        prediction = url_model.predict(features)
        if prediction == 1:
            messagebox.showinfo("Result", "The URL is malicious.")
        else:
            messagebox.showinfo("Result", "The URL is safe.")


def exit_app():
    root.quit()


# Set up the GUI
root = tk.Tk()
root.title("Malware Detector")

# Display the ASCII art
ascii_art = pyfiglet.figlet_format("Malware Detector")
label_art = tk.Label(root, text=ascii_art, font=("Courier", 12), justify=tk.LEFT)
label_art.pack()

# Display welcome message
label_welcome = tk.Label(
    root, text="Welcome to malware detector\n", font=("Helvetica", 14)
)
label_welcome.pack()

# Create a frame for URL input
url_frame = tk.Frame(root)
url_frame.pack(pady=10)

url_label = tk.Label(url_frame, text="Enter URL: ", font=("Helvetica", 12))
url_label.pack(side=tk.LEFT)

url_entry = tk.Entry(url_frame, width=50)
url_entry.pack(side=tk.LEFT)

url_button = tk.Button(url_frame, text="Scan URL", command=run_URL)
url_button.pack(side=tk.LEFT, padx=10)

# Create buttons for PE scanner and exit
btn_pe = tk.Button(root, text="PE Scanner", command=run_PE, width=20)
btn_pe.pack(pady=10)

btn_exit = tk.Button(root, text="Exit", command=exit_app, width=20)
btn_exit.pack(pady=10)

# Run the application
root.mainloop()
