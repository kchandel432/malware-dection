import os
import tkinter as tk
from tkinter import filedialog, messagebox

import joblib
import numpy as np
import pandas as pd
import pyfiglet
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer

# Load pre-trained machine learning models
pe_model = joblib.load("url_model.pkl")
url_model = joblib.load("pe_model.pkl")


# Function to run PE scanner
def run_PE():
    file_path = filedialog.askopenfilename(
        title="Select the  file format",
        filetypes=[("PE Files", "*.exe", ".pdf", ".html", "urls")],
    )
    if file_path:
        # Read the file and prepare features for prediction
        features = extract_pe_features(file_path)
        prediction = pe_model.predict([features])
        if prediction == 1:
            messagebox.showinfo("Result", "The file is malicious.")
        else:
            messagebox.showinfo("Result", "The file is clean.")


def extract_pe_features(file_path):
    # Placeholder function to extract features from PE file
    # Implement your actual feature extraction logic here
    return [0] * 15  # Example feature vector, replace with actual features


# Function to run URL scanner
def run_URL():
    url = url_entry.get()
    if url:
        # Prepare features for prediction
        features = extract_url_features(url)
        prediction = url_model.predict([features])
        if prediction == 1:
            messagebox.showinfo("Result", "The URL is malicious.")
        else:
            messagebox.showinfo("Result", "The URL is safe.")


def extract_url_features(url):
    # Placeholder function to extract features from URL
    # Implement your actual feature extraction logic here
    return [0] * 30  # Example feature vector, replace with actual features


def exit_app():
    root.quit()


# Set up the GUI
root = tk.Tk()
root.title("*Malware Detector*")

# Display the ASCII art
ascii_art = pyfiglet.figlet_format("Malware Detector")
label_art = tk.Label(root, text=ascii_art, font=("Courier", 12), justify=tk.LEFT)
label_art.pack()


# Display welcome message
label_welcome = tk.Label(
    root, text="Welcome to malware detector\n", font=("Helvetica", 14)
)
label_welcome.pack()


# creat a web database for malicious website
def create_pe_data():
    features = np.random.rand(100, 20)  # 100 samples, 20 features each
    labels = np.random.randint(2, size=100)  # 100 labels (0 or 1)
    return features, labels


# sample for the malicious  webpage
def create_url_data():
    urls = [
        "https://takeoffprojects.com/page/phd-projects" if i % 2 == 0 else ""
        for i in range(100)
    ]
    labels = [0 if i % 2 == 0 else 1 for i in range(100)]
    return urls, labels


# algorithm for the tranning of the  datasets
def train_pe_model():
    features, labels = create_pe_data()
    model = RandomForestClassifier()
    model.fit(features, labels)
    joblib.dump(model, "pe_model.pkl")


# time to train the mode;l
def train_url_model():
    urls, labels = create_url_data()
    vectorizer = TfidfVectorizer()
    features = vectorizer.fit_transform(urls)
    model = RandomForestClassifier()
    model.fit(features, labels)
    joblib.dump(model, "url_model.pkl")
    joblib.dump(vectorizer, "vectorizer.pkl")


# train the model and save
train_pe_model()
train_url_model()


# Create a frame for URL input
url_frame = tk.Frame(root)
url_frame.pack(pady=10)

url_label = tk.Label(url_frame, text="Enter URL: ", font=("Helvetica", 19))
url_label.pack(side=tk.LEFT)

url_entry = tk.Entry(url_frame, width=50)
url_entry.pack(side=tk.LEFT)

url_button = tk.Button(url_frame, text="Scan URL", command=run_URL)
url_button.pack(side=tk.LEFT, padx=10)

# Create buttons for PE scanner and exit
btn_pe = tk.Button(root, text="PE Scanner", command=run_PE, width=20)
btn_pe.pack(pady=10)

btn_pe = tk.Button(root, text="pdf Scanner", command=run_PE, width=20)
btn_pe.pack(pady=10)


btn_exit = tk.Button(root, text="Exit", command=exit_app, width=20)
btn_exit.pack(pady=10)

# Run the application
root.mainloop()
